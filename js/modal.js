/* ========================================================
 * Nom du fichier : modal.js
 * Description    : Script JavaScript pour la gestion de la modale,
 *                  validation des formulaires et comportement responsive.
 * Auteur         : Trackozor
 * Date           : 23/12/2024
 * Version        : 1.0.0
 * ======================================================== */


/* =============================== */
/*       Configuration Globale     */
/* =============================== */

const CONFIG = {
     /* ====== Configuration des logs ====== */
    ENABLE_LOGS: true, // Permet d'activer ou de d√©sactiver les logs dans la console. Utile pour basculer entre les environnements (d√©veloppement/production).
    
    /*====== Classes CSS utilis√©es ======*/
    CSS_CLASSES: {
        ERROR_INPUT: 'error-input', // Classe CSS pour styliser un champ avec une erreur (ex : bordure rouge).
        ERROR_MODAL: 'error-modal', // Classe CSS pour afficher une erreur dans la modale.
        MODAL_ACTIVE: 'active',  // Classe CSS pour indiquer qu'une modale est active et visible.
        BODY_NO_SCROLL: 'no-scroll', // Classe CSS pour emp√™cher le d√©filement de la page lorsque la modale est ouverte.
        NAV_RESPONSIVE: 'responsive', // Classe CSS pour activer le mode "responsive" du menu de navigation.
        HERO_DEFAULT: 'hero-default', // Classe CSS pour le style par d√©faut de la section "hero".
        HERO_RESPONSIVE: 'hero-responsive', // Classe CSS pour ajuster la section "hero" en mode responsive.
        MODAL_DEFAULT: 'modal-default', // Classe CSS pour le style par d√©faut de la modale.
        MODAL_RESPONSIVE: 'modal-responsive',  // Classe CSS pour adapter la modale au mode responsive.
    },
    LOG_STYLES: {
        info: "color: blue; font-weight: bold;", // Style pour les messages d'information.
        warn: "color: orange; font-weight: bold;", // Style pour les avertissements.
        error: "color: red; font-weight: bold;", // Style pour les erreurs critiques.
        success: "color: green; font-weight: bold;", // Style pour les messages indiquant une r√©ussite.
        default: "color: black;", // Style par d√©faut pour les messages qui ne correspondent pas √† un type sp√©cifique.
    },
    LOG_ICONS: {
        info: '‚ÑπÔ∏è',  // Ic√¥ne pour les messages d'information.
        warn: '‚ö†Ô∏è', // Ic√¥ne pour les avertissements.
        error: '‚ùå', // Ic√¥ne pour les erreurs critiques.
        success: '‚úÖ', // Ic√¥ne pour indiquer une r√©ussite.
        default: 'üîµ', // Ic√¥ne par d√©faut si le type de message n'est pas d√©fini.
    },
    MEDIA: {
        isMobile: window.matchMedia("(max-width: 768px)").matches, // Indique si l'utilisateur utilise un appareil avec un √©cran de taille inf√©rieure ou √©gale √† 768px.
    },
};


/* =============================== */
/*    S√©lections des √âl√©ments DOM  */
/* =============================== */

const DOM = {
    // ====== Styles racine ======
    rootStyles: getComputedStyle(document.documentElement), 
    // R√©cup√®re les styles CSS globaux d√©finis sur l'√©l√©ment racine (g√©n√©ralement :root). 
    // Utile pour acc√©der aux variables CSS dynamiquement.

    // ====== Navigation ======
    navElement: document.getElementById("Topnav"), 
    // √âl√©ment principal de la barre de navigation.

    // ====== Modale ======
    modalbg: document.querySelector(".bground"), 
    // Conteneur de la modale incluant l'arri√®re-plan et le contenu principal.

    // ====== Section Hero ======
    heroSection: document.querySelector(".hero-content"), 
    // Section principale (g√©n√©ralement un en-t√™te ou une image de pr√©sentation).

    // ====== Boutons de la modale ======
    modalbtn: document.querySelectorAll(".modal-btn"), 
    // Tous les boutons qui d√©clenchent l'ouverture de la modale.

    // ====== Champs de formulaire ======
    formData: document.querySelectorAll(".formData"), 
    // Conteneurs pour chaque champ de formulaire (inclut les labels, inputs, messages d'erreur).

    // ====== Bouton pour fermer la modale ======
    closeBtn: document.querySelector(".close"), 
    // Bouton permettant de fermer la modale.

    // ====== Champs d'entr√©e ======
    inputs: document.querySelectorAll('input'), 
    // Tous les champs d'entr√©e (input) pr√©sents dans le formulaire.

    // ====== Champ de saisie pour la date de naissance ======
    birthdateInput: document.getElementById('birthdate'), 
    // Champ sp√©cifique pour saisir la date de naissance.

    // ====== Modale de confirmation ======
    confirmationModal: document.getElementById('confirmation-modal'), 
    // Conteneur de la modale de confirmation affich√©e apr√®s une soumission r√©ussie.

    // ====== Bouton pour fermer la modale de confirmation ======
    closeModalBtn: document.getElementById('close-modal-btn'), 
    // Bouton utilis√© pour fermer la modale de confirmation.

    // ====== Liens de navigation ======
    navLinks: document.querySelector('.nav-links'), 
    // Conteneur pour les liens de navigation. Utilis√© notamment pour g√©rer l'√©tat responsive du menu.
};



/*========================================================================================*/
/*                       =========== Fonctions utilitaires ===================            */
/*========================================================================================*/

/*======================Fonction log console==============================================*/
/**
 * Log les √©v√©nements dans la console avec horodatage, pr√©fixes et styles.
 * 
 * @param {string} type - Type de log : 'info', 'warn', 'error'.
 * @param {string} message - Message descriptif de l'√©v√©nement.
 * @param {Object} [data={}] - Donn√©es suppl√©mentaires √† afficher .
 */
function logEvent(type, message, data = {}) {
    
    /* 1. V√©rifie si les logs sont activ√©s via CONFIG.ENABLE_LOGS.*/  
    if (!CONFIG.ENABLE_LOGS) {
        return; // Si les logs sont d√©sactiv√©s, sortir de la fonction imm√©diatement.
    }

    /* 2. R√©cup√®re l'horodatage et construit un pr√©fixe pour identifier la source du log.*/
    const timestamp = new Date().toLocaleTimeString(); // R√©cup√®re l'heure actuelle au format HH:MM:SS.
    const prefix = `[GameOn][${timestamp}]`; // Pr√©fixe standard pour identifier les logs et horodatage.

    /*3. S√©lectionne une ic√¥ne, un style en fonction du type de log  et construit le message complet avec le type, l'ic√¥ne, et le contenu.*/
    const icon = CONFIG.LOG_ICONS[type] || CONFIG.LOG_ICONS.default;// Ic√¥ne par d√©faut si le type est inconnu    
    const style = CONFIG.LOG_STYLES[type] || CONFIG.LOG_STYLES.default ;// R√©cup√®re le style appropri√© depuis `logStyles` en fonction du type (info, warn, error).
    const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`; // Message complet √† afficher.

    /*4. V√©rifie si le message est vide pour √©viter les logs inutiles.*/
    if (!message) {
        console.warn('%c[AVERTISSEMENT] Aucun message fourni dans logEvent', style);
        return;
    }

    /* 5. Affiche le log dans la console en utilisant le type dynamique (info, warn, error, etc.).*/
    try {
    console[type] 
        ? console[type](`%c${fullMessage}`, style, data) 
        : console.log(`%c${fullMessage}`, style, data);
    } catch (error) {
        console.error('Erreur dans logEvent :', error);
    }

}

/* ========================= Fonction pour ajouter une classe CSS =================*/
/**
 * Ajoute une classe CSS √† un √©l√©ment HTML.
 * 
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† ajouter.
 * @returns {boolean} - `true` si la classe a √©t√© ajout√©e, `false` si elle √©tait d√©j√† pr√©sente ou en cas d'erreur.
 */
function addClass(element, className) {
    // V√©rifie si l'√©l√©ment est valide
    if (!(element instanceof HTMLElement)) {
        console.error('addClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.', { element });
        return false; // √âchec de l'op√©ration
    }

    // V√©rifie si la classe est une cha√Æne de caract√®res valide
    if (typeof className !== 'string' || className.trim() === '') {
        console.error('addClass: Le param√®tre "className" est invalide.', { className });
        return false; // √âchec de l'op√©ration
    }

    // V√©rifie si la classe est d√©j√† pr√©sente
    if (element.classList.contains(className)) {
        console.info(`addClass: La classe "${className}" est d√©j√† pr√©sente sur l'√©l√©ment.`, { element });
        return false; // Pas besoin d'ajouter la classe
    }

    // Ajoute la classe √† l'√©l√©ment
    try {
        element.classList.add(className);
        console.info(`addClass: La classe "${className}" a √©t√© ajout√©e avec succ√®s.`, { element });
        return true; // Succ√®s de l'op√©ration
    } catch (error) {
        console.error('addClass: Une erreur est survenue lors de l\'ajout de la classe.', { error });
        return false; // √âchec de l'op√©ration
    }
}



/* ========================= Fonction pour supprimer une classe CSS =================*/
/**
 * Supprime une classe CSS d'un √©l√©ment HTML.
 * 
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† supprimer.
 * @returns {boolean} - `true` si la classe a √©t√© supprim√©e, `false` si elle n'√©tait pas pr√©sente ou en cas d'erreur.
 */
function removeClass(element, className) {
    // 1. V√©rifie que l'√©l√©ment est un √©l√©ment HTML valide
    if (!(element instanceof HTMLElement)) {
        console.error('removeClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.', { element });
        return false; // √âchec de l'op√©ration
    }

    // 2. V√©rifie que le nom de la classe est une cha√Æne non vide
    if (typeof className !== 'string' || className.trim() === '') {
        console.error('removeClass: Le param√®tre "className" est invalide.', { className });
        return false; // √âchec de l'op√©ration
    }

    // 3. V√©rifie si la classe est pr√©sente sur l'√©l√©ment
    if (!element.classList.contains(className)) {
        console.info(`removeClass: La classe "${className}" n'est pas pr√©sente sur l'√©l√©ment.`, { element });
        return false; // Pas besoin de retirer la classe
    }

    // 4. Retire la classe de l'√©l√©ment
    try {
        element.classList.remove(className);
        console.info(`removeClass: La classe "${className}" a √©t√© retir√©e avec succ√®s.`, { element });
        return true; // Succ√®s de l'op√©ration
    } catch (error) {
        console.error('removeClass: Une erreur est survenue lors de la suppression de la classe.', { error });
        return false; // √âchec de l'op√©ration
    }
}

/*===============================================================================================*/
/*                                 ======= Affichage responsive toggle =======                   */           
/*===============================================================================================*/
/** 
 * Fonction pour activer/d√©sactiver le menu responsive.
 * 
 * √âtapes :
 * 1. Ajoute ou retire la classe "responsive" √† l'√©l√©ment de navigation (`navElement`).
 * 2. Modifie les classes des sections Hero et Modale pour s'adapter au mode responsive.
 * 3. Enregistre les actions effectu√©es dans la console pour un suivi pr√©cis.
 * 4. G√®re les erreurs avec un bloc try-catch.
 * 
 * @returns {void}
 */
function editNav() {
    try {
        // V√©rifie si l'√©l√©ment de navigation existe
        if (!DOM.navElement || !DOM.heroSection || !DOM.modalbg) {
            throw new Error('Certains √©l√©ments DOM requis sont introuvables.');
        }

        // Alterne la classe "responsive" sur l'√©l√©ment de navigation
        const isResponsive = DOM.navElement.classList.toggle(CONFIG.CSS_CLASSES.NAV_RESPONSIVE);

        // Applique les classes appropri√©es pour la section Hero et la modale
        if (isResponsive) {
            // Activation du mode responsive
            DOM.heroSection.classList.replace(
                CONFIG.CSS_CLASSES.HERO_DEFAULT,
                CONFIG.CSS_CLASSES.HERO_RESPONSIVE
            );
            DOM.modalbg.classList.replace(
                CONFIG.CSS_CLASSES.MODAL_DEFAULT,
                CONFIG.CSS_CLASSES.MODAL_RESPONSIVE
            );
        } else {
            // D√©sactivation du mode responsive
            DOM.heroSection.classList.replace(
                CONFIG.CSS_CLASSES.HERO_RESPONSIVE,
                CONFIG.CSS_CLASSES.HERO_DEFAULT
            );
            DOM.modalbg.classList.replace(
                CONFIG.CSS_CLASSES.MODAL_RESPONSIVE,
                CONFIG.CSS_CLASSES.MODAL_DEFAULT
            );
        }

        // Log l'√©tat actuel du menu responsive
        logEvent('info', `Menu responsive ${isResponsive ? 'activ√©' : 'd√©sactiv√©'}.`, {
            responsiveState: isResponsive ? 'opened' : 'closed',
        });
    } catch (error) {
        // Gestion des erreurs
        logEvent('error', 'Erreur lors de la gestion du menu responsive.', { error: error.message });
        console.error('Erreur dans editNav :', error);
    }
}
