/* ========================================================
 * Nom du fichier : modal.js
 * Description    : Script JavaScript pour la gestion de la modale,
 *                  validation des formulaires et comportement responsive.
 * Auteur         : Trackozor
 * Date           : 23/12/2024
 * Version        : 1.0.0
 * ======================================================== */


/* =============================== */
/*       Configuration Globale     */
/* =============================== */

const CONFIG = {
    ENABLE_LOGS: true, // Activation/d√©sactivation des logs
    CSS_CLASSES: {
        ERROR_INPUT: 'error-input',
        ERROR_MODAL: 'error-modal',
        MODAL_ACTIVE: 'active',
        BODY_NO_SCROLL: 'no-scroll',
        NAV_RESPONSIVE: 'responsive',
        HERO_DEFAULT: 'hero-default',
        HERO_RESPONSIVE: 'hero-responsive',
        MODAL_DEFAULT: 'modal-default',
        MODAL_RESPONSIVE: 'modal-responsive',
    },
    LOG_STYLES: {
        info: "color: blue; font-weight: bold;",
        warn: "color: orange; font-weight: bold;",
        error: "color: red; font-weight: bold;",
        success: "color: green; font-weight: bold;",
        default: "color: black;",
    },
    LOG_ICONS: {
        info: '‚ÑπÔ∏è',
        warn: '‚ö†Ô∏è',
        error: '‚ùå',
        success: '‚úÖ',
        default: 'üîµ',
    },
    MEDIA: {
        isMobile: window.matchMedia("(max-width: 768px)").matches, // Indique si l'utilisateur est sur mobile
    },
};


/* =============================== */
/*    S√©lections des √âl√©ments DOM  */
/* =============================== */

const DOM = {
    rootStyles: getComputedStyle(document.documentElement),
    navElement: document.getElementById("Topnav"),
    modalbg: document.querySelector(".bground"),
    heroSection: document.querySelector(".hero-content"),
    modalbtn: document.querySelectorAll(".modal-btn"),
    formData: document.querySelectorAll(".formData"),
    closeBtn: document.querySelector(".close"),
    inputs: document.querySelectorAll('input'),
    birthdateInput: document.getElementById('birthdate'),
    confirmationModal: document.getElementById('confirmation-modal'),
    closeModalBtn: document.getElementById('close-modal-btn'),
    navLinks: document.querySelector('.nav-links'),
};

/*========================================================================================*/
/*                       =========== Fonctions utilitaires ===================            */
/*========================================================================================*/

/*======================Fonction log console==============================================*/
/**
 * Log les √©v√©nements dans la console avec horodatage, pr√©fixes et styles.
 * 
 * @param {string} type - Type de log : 'info', 'warn', 'error'.
 * @param {string} message - Message descriptif de l'√©v√©nement.
 * @param {Object} [data={}] - Donn√©es suppl√©mentaires √† afficher .
 */
function logEvent(type, message, data = {}) {
    
    /* 1. V√©rifie si les logs sont activ√©s via CONFIG.ENABLE_LOGS.*/  
    if (!CONFIG.ENABLE_LOGS) {
        return; // Si les logs sont d√©sactiv√©s, sortir de la fonction imm√©diatement.
    }

    /* 2. R√©cup√®re l'horodatage et construit un pr√©fixe pour identifier la source du log.*/
    const timestamp = new Date().toLocaleTimeString(); // R√©cup√®re l'heure actuelle au format HH:MM:SS.
    const prefix = `[GameOn][${timestamp}]`; // Pr√©fixe standard pour identifier les logs et horodatage.

    /*3. S√©lectionne une ic√¥ne, un style en fonction du type de log  et construit le message complet avec le type, l'ic√¥ne, et le contenu.*/
    const icon = CONFIG.LOG_ICONS[type] || CONFIG.LOG_ICONS.default;// Ic√¥ne par d√©faut si le type est inconnu    
    const style = CONFIG.LOG_STYLES[type] || CONFIG.LOG_STYLES.default ;// R√©cup√®re le style appropri√© depuis `logStyles` en fonction du type (info, warn, error).
    const fullMessage = `${icon} ${prefix} ${type.toUpperCase()}: ${message}`; // Message complet √† afficher.

    /*4. V√©rifie si le message est vide pour √©viter les logs inutiles.*/
    if (!message) {
        console.warn('%c[AVERTISSEMENT] Aucun message fourni dans logEvent', style);
        return;
    }

    /* 5. Affiche le log dans la console en utilisant le type dynamique (info, warn, error, etc.).*/
    try {
    console[type] 
        ? console[type](`%c${fullMessage}`, style, data) 
        : console.log(`%c${fullMessage}`, style, data);
    } catch (error) {
        console.error('Erreur dans logEvent :', error);
    }

}

/* ========================= Fonction pour ajouter une classe CSS =================*/
/**
 * Ajoute une classe CSS √† un √©l√©ment HTML.
 * 
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† ajouter.
 * @returns {boolean} - `true` si la classe a √©t√© ajout√©e, `false` si elle √©tait d√©j√† pr√©sente ou en cas d'erreur.
 */
function addClass(element, className) {
    // V√©rifie si l'√©l√©ment est valide
    if (!(element instanceof HTMLElement)) {
        console.error('addClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.', { element });
        return false; // √âchec de l'op√©ration
    }

    // V√©rifie si la classe est une cha√Æne de caract√®res valide
    if (typeof className !== 'string' || className.trim() === '') {
        console.error('addClass: Le param√®tre "className" est invalide.', { className });
        return false; // √âchec de l'op√©ration
    }

    // V√©rifie si la classe est d√©j√† pr√©sente
    if (element.classList.contains(className)) {
        console.info(`addClass: La classe "${className}" est d√©j√† pr√©sente sur l'√©l√©ment.`, { element });
        return false; // Pas besoin d'ajouter la classe
    }

    // Ajoute la classe √† l'√©l√©ment
    try {
        element.classList.add(className);
        console.info(`addClass: La classe "${className}" a √©t√© ajout√©e avec succ√®s.`, { element });
        return true; // Succ√®s de l'op√©ration
    } catch (error) {
        console.error('addClass: Une erreur est survenue lors de l\'ajout de la classe.', { error });
        return false; // √âchec de l'op√©ration
    }
}


/**
 * Supprime une classe CSS d'un √©l√©ment HTML.
 * 
 * √âtapes :
 * 1. Valide que `element` est un √©l√©ment HTML.
 * 2. Valide que `className` est une cha√Æne de caract√®res non vide.
 * 3. V√©rifie si la classe est pr√©sente sur l'√©l√©ment.
 * 4. Supprime la classe si elle est pr√©sente.
 * 5. Retourne un bool√©en indiquant si l'op√©ration a r√©ussi.
 * 
 * @param {HTMLElement} element - √âl√©ment HTML cible.
 * @param {string} className - Nom de la classe CSS √† supprimer.
 * @returns {boolean} - `true` si la classe a √©t√© supprim√©e, `false` si elle n'√©tait pas pr√©sente ou en cas d'erreur.
 */
function removeClass(element, className) {
    // 1. V√©rifie que l'√©l√©ment est un √©l√©ment HTML valide
    if (!(element instanceof HTMLElement)) {
        console.error('removeClass: Le param√®tre "element" n\'est pas un √©l√©ment HTML valide.', { element });
        return false; // √âchec de l'op√©ration
    }

    // 2. V√©rifie que le nom de la classe est une cha√Æne non vide
    if (typeof className !== 'string' || className.trim() === '') {
        console.error('removeClass: Le param√®tre "className" est invalide.', { className });
        return false; // √âchec de l'op√©ration
    }

    // 3. V√©rifie si la classe est pr√©sente sur l'√©l√©ment
    if (!element.classList.contains(className)) {
        console.info(`removeClass: La classe "${className}" n'est pas pr√©sente sur l'√©l√©ment.`, { element });
        return false; // Pas besoin de retirer la classe
    }

    // 4. Retire la classe de l'√©l√©ment
    try {
        element.classList.remove(className);
        console.info(`removeClass: La classe "${className}" a √©t√© retir√©e avec succ√®s.`, { element });
        return true; // Succ√®s de l'op√©ration
    } catch (error) {
        console.error('removeClass: Une erreur est survenue lors de la suppression de la classe.', { error });
        return false; // √âchec de l'op√©ration
    }
}
